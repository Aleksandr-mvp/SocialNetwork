{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","descriptionBlock","avatar","contact","status","isOwner","data","postsBlock","posts","item","ProfileStatusWithHooks","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","_useState4","setStatus","useEffect","react_default","a","createElement","className","s","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","style","formSummaryError","createField","Input","type","Textarea","keys","contacts","map","key","ProfileData","_ref2","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo_Contacts","contactTitle","contactValue","Contacts","_ref3","ProfileInfo","saveAvatar","saveProfile","Preloader","src","photos","large","userPhoto","target","files","length","ProfileInfo_ProfileDataForm","initialValues","FormData","then","ProfileInfo_ProfileData","ProfileInfo_ProfileStatusWithHooks","Post","message","likesCount","MyPosts","React","memo","postsElements","p","MyPosts_Post_Post","id","AddNewPostsFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","component","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","components_Profile_Profile","assign","Component","compose","withRouter","auth","isAuth"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,iBAAA,sCAAAC,OAAA,4BAAAC,QAAA,6BAAAC,OAAA,4BAAAC,QAAA,6BAAAC,KAAA,gDCAlBP,EAAAC,QAAA,CAAkBO,WAAA,4BAAAC,MAAA,6CCAlBT,EAAAC,QAAA,CAAkBS,KAAA,2JC0CHC,EAxCgB,SAACC,GAAU,IAAAC,EAERC,oBAAS,GAFDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEjCK,EAFiCH,EAAA,GAEvBI,EAFuBJ,EAAA,GAAAK,EAGZN,mBAASF,EAAMP,QAHHgB,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGjCf,EAHiCgB,EAAA,GAGzBC,EAHyBD,EAAA,GAKtCE,oBAAW,WACPD,EAAUV,EAAMP,SACjB,CAACO,EAAMP,SAeV,OACImB,EAAAC,EAAAC,cAAA,OAAKC,UAAYC,IAAEvB,SACZa,GACCM,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBADJ,IACoBF,EAAAC,EAAAC,cAAA,QAAMG,cAjBb,WACrBV,GAAY,KAgBwDP,EAAMP,QAAU,YAG9Ea,GACEM,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOI,SAbA,SAACC,GACpBT,EAAUS,EAAEC,cAAcC,QAYmBC,WAAW,EAAMC,OAlBvC,WACvBhB,GAAY,GACZP,EAAMwB,aAAa/B,IAiBA4B,MAAO5B,2DCInBgC,EAHkBC,YAAU,CAACC,KAAM,gBAAjBD,CA9BT,SAAAE,GAAsC,IAAnCC,EAAmCD,EAAnCC,aAAcC,EAAqBF,EAArBE,QAASC,EAAYH,EAAZG,MAC9C,OAAOnB,EAAAC,EAAAC,cAAA,QAAMkB,SAAUH,GACnBjB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,uBACHiB,GAASnB,EAAAC,EAAAC,cAAA,OAAKC,UAAWkB,IAAMC,kBAC5BH,GAGLnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBADJ,KACuBqB,YAAY,YAAa,WAAY,GAAIC,MAEhExB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,8BADJ,MACgCqB,YAAY,GAAI,iBAAkB,GAAIC,IAAO,CAACC,KAAM,cAEpFzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mCADJ,KAEKqB,YAAY,yBAA0B,4BAA6B,GAAIG,MAE5E1B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBADJ,MACuBqB,YAAY,WAAY,UAAW,GAAIG,MAE9D1B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBADJ,KACsBV,OAAOmC,KAAKT,EAAQU,UAAUC,IAAI,SAAAC,GAChD,OAAO9B,EAAAC,EAAAC,cAAA,OAAK4B,IAAKA,EAAK3B,UAAWC,IAAExB,SAC/BoB,EAAAC,EAAAC,cAAA,SAAI4B,EAAJ,KAAWP,YAAYO,EAAK,YAAcA,EAAK,GAAIN,aCcjEO,EAAc,SAAAC,GAAwC,IAArCd,EAAqCc,EAArCd,QAASpC,EAA4BkD,EAA5BlD,QAASmD,EAAmBD,EAAnBC,aACrC,OAAOjC,EAAAC,EAAAC,cAAA,WACFpB,GAAWkB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQgC,QAASD,GAAjB,SACjBjC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBADJ,KACuBgB,EAAQiB,UAE/BnC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,8BADJ,KAC+BgB,EAAQkB,eAAiB,MAAQ,MAE/DlB,EAAQkB,gBACTpC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mCADJ,IACmCgB,EAAQmB,2BAG3CrC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBADJ,KACsBgB,EAAQoB,SAE9BtC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBADJ,KACsBV,OAAOmC,KAAKT,EAAQU,UAAUC,IAAI,SAAAC,GAChD,OAAO9B,EAAAC,EAAAC,cAACqC,EAAD,CAAUT,IAAKA,EAAKU,aAAcV,EAAKW,aAAcvB,EAAQU,SAASE,UAOvFY,EAAW,SAAAC,GAAkC,IAAhCH,EAAgCG,EAAhCH,aAAcC,EAAkBE,EAAlBF,aAC7B,OAAOzC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAExB,SAASoB,EAAAC,EAAAC,cAAA,SAAIsC,GAA/B,KAAmDC,IAG/CG,EAlEK,SAAA5B,GAAuE,IAArEE,EAAqEF,EAArEE,QAASrC,EAA4DmC,EAA5DnC,OAAQ+B,EAAoDI,EAApDJ,aAAc9B,EAAsCkC,EAAtClC,QAAS+D,EAA6B7B,EAA7B6B,WAAYC,EAAiB9B,EAAjB8B,YAAiBzD,EAEzDC,oBAAS,GAFgDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAElFK,EAFkFH,EAAA,GAExEI,EAFwEJ,EAAA,GAIvF,IAAK2B,EACD,OAAOlB,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,MAeX,OACI/C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAE1B,kBACdsB,EAAAC,EAAAC,cAAA,OAAK8C,IAAK9B,EAAQ+B,OAAOC,OAASC,IAAWhD,UAAWC,IAAEzB,SACxDG,GAAWkB,EAAAC,EAAAC,cAAA,SAAOuB,KAAM,OAAQnB,SAhBrB,SAACC,GAClBA,EAAE6C,OAAOC,MAAMC,QACfT,EAAWtC,EAAE6C,OAAOC,MAAM,OAgBpB3D,EACIM,EAAAC,EAAAC,cAACqD,EAAD,CAAiBC,cAAetC,EAASA,QAASA,EAASE,SAb5D,SAACqC,GACdX,EAAYW,GAAUC,KAAK,WACvB/D,GAAY,QAYFK,EAAAC,EAAAC,cAACyD,EAAD,CAAa1B,aAAc,WAAOtC,GAAY,IAAQuB,QAASA,EAASpC,QAASA,IAEvFkB,EAAAC,EAAAC,cAAC0D,EAAD,CAAwB/E,OAAQA,EAAQ+B,aAAcA,mDCtBvDiD,EAZF,SAACzE,GACZ,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAElB,MAChBc,EAAAC,EAAAC,cAAA,OAAK8C,IAAI,4FACL5D,EAAM0E,QACN9D,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,oBADE,IACkBd,EAAM2E,8BCF5BC,EAAUC,IAAMC,KAAK,SAAA9E,GAEvB,IAAI+E,EACA/E,EAAMH,MAAM4C,IAAI,SAAAuC,GAAC,OAAIpE,EAAAC,EAAAC,cAACmE,EAAD,CAAMvC,IAAKsC,EAAEE,GAAIR,QAASM,EAAEN,QAASC,WAAYK,EAAEL,eAM5E,OACI/D,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEpB,YACdgB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACqE,EAAD,CAAsBnD,SAPd,SAACoD,GACbpF,EAAMqF,QAAQD,EAAOE,gBAOjB1E,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEnB,OACbkF,MAMXQ,EAAcC,YAAiB,IAgB/BL,EAAuBzD,YAAU,CAACC,KAAM,0BAAjBD,CAdL,SAAC1B,GACrB,OACIY,EAAAC,EAAAC,cAAA,QAAMkB,SAAUhC,EAAM6B,cAClBjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOC,UAAWpD,IAAUqD,KAAK,cAAcC,YAAY,eACvDC,SAAU,CAACC,IAAUP,MAE7B3E,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,8BAQD8D,YCxBAmB,EAFUC,YAdD,SAACC,GACrB,MAAO,CACHpG,MAAOoG,EAAMC,YAAYrG,MACzByF,YAAaW,EAAMC,YAAYZ,cAIZ,SAACa,GACxB,MAAO,CACHd,QAAS,SAACC,GACNa,EAASC,YAAqBd,OAIjBU,CAA6CpB,GCDvDyB,EAdC,SAACrG,GACb,OACIY,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwF,EAAD,CAAa7C,WAAYzD,EAAMyD,WAClB/D,QAASM,EAAMN,QACfoC,QAAS9B,EAAM8B,QACfrC,OAAQO,EAAMP,OACd+B,aAAcxB,EAAMwB,aACpBkC,YAAa1D,EAAM0D,cAChC9C,EAAAC,EAAAC,cAACyF,EAAD,wBCNNC,2LAGE,IAAIC,EAASC,KAAK1G,MAAM2G,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAK1G,MAAM6G,mBAEhBH,KAAK1G,MAAM8G,QAAQC,KAAK,UAGhCL,KAAK1G,MAAMgH,eAAeP,GAC1BC,KAAK1G,MAAMiH,UAAUR,+CAIrBC,KAAKQ,4DAGUC,EAAWC,EAAWC,GACjCX,KAAK1G,MAAM2G,MAAMC,OAAOH,QAAUU,EAAUR,MAAMC,OAAOH,QACzDC,KAAKQ,kDAKT,OACItG,EAAAC,EAAAC,cAACwG,EAADlH,OAAAmH,OAAA,GAAab,KAAK1G,MAAlB,CACSN,SAAUgH,KAAK1G,MAAM2G,MAAMC,OAAOH,OAClC3E,QAAS4E,KAAK1G,MAAM8B,QACpBrC,OAAQiH,KAAK1G,MAAMP,OACnB+B,aAAckF,KAAK1G,MAAMwB,aACzBiC,WAAYiD,KAAK1G,MAAMyD,qBA/BboB,IAAM2C,WA2CtBC,sBACXC,IACA1B,YATkB,SAACC,GAAD,MAAY,CAC9BnE,QAASmE,EAAMC,YAAYpE,QAC3BrC,OAAQwG,EAAMC,YAAYzG,OAC1BoH,iBAAkBZ,EAAM0B,KAAKlB,OAC7BmB,OAAQ3B,EAAM0B,KAAKC,SAKM,CAACZ,mBAAgBC,cAAWzF,iBAAciC,eAAYC,kBAFpE+D,CAGbjB","file":"static/js/3.82b38731.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2g9u4\",\"avatar\":\"ProfileInfo_avatar__3BUDx\",\"contact\":\"ProfileInfo_contact__-JRT5\",\"status\":\"ProfileInfo_status__3ryUh\",\"isOwner\":\"ProfileInfo_isOwner__2D4wO\",\"data\":\"ProfileInfo_data__2TsK8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1iiut\",\"posts\":\"MyPosts_posts__oBgcD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2ZCY-\"};","import React, { useState, useEffect } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status] );\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div className ={s.status}>\r\n            { !editMode &&\r\n                <div>\r\n                    <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport { reduxForm } from 'redux-form';\r\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport style from '../../common/FormsControls/FormsControls.module.css';\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        { error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b> : {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n        </div>       \r\n        <div>\r\n            <b>My professional skills</b> :\r\n            {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>       \r\n        <div>\r\n            <b>About me</b> : {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                </div>\r\n            })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: \"edit-profile\"})(ProfileDataForm);\r\n\r\n\r\nexport default ProfileDataFormReduxForm;","import React, { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, saveAvatar, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onAvatarSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            saveAvatar(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (FormData) => {\r\n        saveProfile(FormData).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.avatar}/>\r\n                { isOwner && <input type={\"file\"} onChange={onAvatarSelected}/>}\r\n\r\n                { editMode \r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/> \r\n                    : <ProfileData goToEditMode={() => {setEditMode(true)}} profile={profile} isOwner={isOwner}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b> {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Contacts = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utility/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n    let postsElements =\r\n        props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostsFormRedux onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostsForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newPostText\" placeholder=\"Post message\"\r\n                    validate={[required, maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostsFormRedux = reduxForm({form: 'ProfileAddNewPostsForm'})(AddNewPostsForm);\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo saveAvatar={props.saveAvatar} \r\n                         isOwner={props.isOwner} \r\n                         profile={props.profile} \r\n                         status={props.status} \r\n                         updateStatus={props.updateStatus} \r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus, saveAvatar, saveProfile} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile} \r\n                     status={this.props.status} \r\n                     updateStatus={this.props.updateStatus}\r\n                     saveAvatar={this.props.saveAvatar}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, saveAvatar, saveProfile})\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}